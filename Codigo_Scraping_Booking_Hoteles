{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3c798e64",
   "metadata": {},
   "source": [
    "\n",
    "# 🧩 Booking Hoteles \n",
    "**Nota:** Scrapping Hoteles\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a912fc6",
   "metadata": {},
   "source": [
    "## 🧰 Librerías e importaciones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "49e11f1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from selenium import webdriver\n",
    "from selenium.webdriver.chrome.service import Service\n",
    "from selenium.webdriver.support.ui import WebDriverWait\n",
    "from selenium.webdriver.support import expected_conditions as EC\n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.common.exceptions import TimeoutException, NoSuchElementException\n",
    "import csv\n",
    "import time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc2a01e3",
   "metadata": {},
   "source": [
    "## 🔧 Helpers (funciones auxiliares)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53d94252",
   "metadata": {},
   "outputs": [],
   "source": [
    "def handle_no_such_element_exception(task):\n",
    "    try:\n",
    "        return task()\n",
    "    except NoSuchElementException:\n",
    "        return None\n",
    "\n",
    "def click_boton_cargar_mas(driver, delay=3, max_clicks=50):\n",
    "    clicks = 0\n",
    "    while clicks < max_clicks:\n",
    "        try:\n",
    "            # Nuevo selector: busca el texto dentro del span anidado\n",
    "            boton = WebDriverWait(driver, 5).until(\n",
    "                EC.element_to_be_clickable((By.XPATH, '//button[.//span[contains(text(), \"Cargar más resultados\")]]'))\n",
    "            )\n",
    "            driver.execute_script(\"arguments[0].scrollIntoView(true);\", boton)\n",
    "            time.sleep(1)\n",
    "            driver.execute_script(\"arguments[0].click();\", boton)\n",
    "            clicks += 1\n",
    "            print(f\"✅ Click número {clicks} en 'Cargar más resultados'\")\n",
    "            time.sleep(delay)\n",
    "        except TimeoutException:\n",
    "            print(\"ℹ️ No hay más botón 'Cargar más resultados'\")\n",
    "            break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e04b174",
   "metadata": {},
   "source": [
    "## 🌐 Configuración del navegador y apertura de la URL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5efa5e13",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuración del navegador\n",
    "driver = webdriver.Chrome(service=Service())\n",
    "\n",
    "# Ir a la página\n",
    "driver.get(\"https://www.booking.com/searchresults.es.html?ss=Barcelona&ssne=Barcelona&ssne_untouched=Barcelona&efdco=1&label=barcelona-nQ97YskHCKS590hgJqwasQS341843104301%3Apl%3Ata%3Ap1%3Ap2%3Aac%3Aap%3Aneg%3Afi%3Atikwd-16185403852%3Alp1005493%3Ali%3Adec%3Adm%3Appccp%3DUmFuZG9tSVYkc2RlIyh9YfpWGnRw6lOGdE15X_QAcTg&aid=1610682&lang=es&sb=1&src_elem=sb&src=searchresults&dest_id=-372490&dest_type=city&checkin=2026-01-14&checkout=2026-01-15&group_adults=1&no_rooms=1&group_children=0\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ac30ff2",
   "metadata": {},
   "source": [
    "## 🍪 UX: aceptar cookies y cerrar modal de inicio de sesión (si aparece)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5c012b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Aceptar cookies\n",
    "try:\n",
    "    WebDriverWait(driver, 5).until(\n",
    "        EC.element_to_be_clickable((By.ID, \"onetrust-accept-btn-handler\"))\n",
    "    ).click()\n",
    "except:\n",
    "    print(\"No apareció el banner de cookies.\")\n",
    "\n",
    "# Cerrar modal de inicio de sesión si aparece\n",
    "try:\n",
    "    WebDriverWait(driver, 5).until(\n",
    "        EC.element_to_be_clickable((By.CSS_SELECTOR, '[aria-label=\"Dismiss sign-in info.\"]'))\n",
    "    ).click()\n",
    "except:\n",
    "    print(\"No apareció el modal de inicio de sesión.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a5effc6",
   "metadata": {},
   "source": [
    "## ⬇️📜 Preparación: scroll inicial y expansión de resultados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91759c0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scroll inicial para que cargue el botón\n",
    "driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n",
    "time.sleep(3)\n",
    "\n",
    "# Clicks en el botón para cargar más resultados\n",
    "click_boton_cargar_mas(driver, delay=3, max_clicks=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c63be9bf",
   "metadata": {},
   "source": [
    "## 🔎 Scraping de tarjetas de hotel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "879c59c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scraping\n",
    "items = []\n",
    "property_items = driver.find_elements(By.CSS_SELECTOR, '[data-testid=\"property-card\"]')\n",
    "print(f\"Número de hoteles encontrados: {len(property_items)}\")\n",
    "\n",
    "for property_item in property_items:\n",
    "    url = handle_no_such_element_exception(lambda: property_item.find_element(By.CSS_SELECTOR, 'a[data-testid=\"title-link\"]').get_attribute(\"href\"))\n",
    "    image = handle_no_such_element_exception(lambda: property_item.find_element(By.CSS_SELECTOR, 'img[data-testid=\"image\"]').get_attribute(\"src\"))\n",
    "    title = handle_no_such_element_exception(lambda: property_item.find_element(By.CSS_SELECTOR, 'a[data-testid=\"title-link\"]').text)\n",
    "    address = handle_no_such_element_exception(lambda: property_item.find_element(By.CSS_SELECTOR, '[data-testid=\"address\"]').text)\n",
    "    distance = handle_no_such_element_exception(lambda: property_item.find_element(By.CSS_SELECTOR, '[data-testid=\"distance\"]').text)\n",
    "\n",
    "    review_score = None\n",
    "    review_count = None\n",
    "    review_element = handle_no_such_element_exception(\n",
    "        lambda: property_item.find_element(By.CSS_SELECTOR, '[data-testid=\"review-score-link\"]')\n",
    "    )\n",
    "    if review_element:\n",
    "        review_text = review_element.text.strip()\n",
    "        parts = review_text.split('\\\\n')\n",
    "        for part in parts:\n",
    "            try:\n",
    "                score = float(part.replace(\",\", \".\"))\n",
    "                if 0 <= score <= 10:\n",
    "                    review_score = score\n",
    "            except:\n",
    "                pass\n",
    "            if \"comentarios\" in part or \"reviews\" in part:\n",
    "                digits = ''.join([c for c in part if c.isdigit()])\n",
    "                if digits:\n",
    "                    review_count = int(digits)\n",
    "\n",
    "    description = handle_no_such_element_exception(lambda: property_item.find_element(By.CSS_SELECTOR, '[data-testid=\"recommended-units\"]').text)\n",
    "\n",
    "    original_price = None\n",
    "    price = None\n",
    "    price_element = handle_no_such_element_exception(lambda: property_item.find_element(By.CSS_SELECTOR,' [data-testid=\"availability-rate-information\"]'))\n",
    "    if price_element:\n",
    "        original_price = handle_no_such_element_exception(lambda: (\n",
    "            price_element.find_element(By.CSS_SELECTOR, '[aria-hidden=\"true\"]:not([data-testid])').text.replace(\",\", \"\")\n",
    "        ))\n",
    "        price = handle_no_such_element_exception(lambda: (\n",
    "            price_element.find_element(By.CSS_SELECTOR, '[data-testid=\"price-and-discounted-price\"]').text.replace(\",\", \"\")\n",
    "        ))\n",
    "\n",
    "    item = {\n",
    "      \"url\": url,\n",
    "      \"image\": image,\n",
    "      \"title\": title,\n",
    "      \"address\": address,\n",
    "      \"distance\": distance,\n",
    "      \"review_score\": review_score,\n",
    "      \"review_count\": review_count,\n",
    "      \"description\": description,\n",
    "      \"original_price\": original_price,\n",
    "      \"price\": price\n",
    "    }\n",
    "    items.append(item)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b27a35b4",
   "metadata": {},
   "source": [
    "## 💾 Guardar resultados en CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea28d053",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Guardar en CSV\n",
    "if items:  # solo si hay datos\n",
    "    with open(\"hoteles_barcelona_enero.csv\", mode=\"w\", newline=\"\", encoding=\"utf-8\") as file:\n",
    "        writer = csv.DictWriter(file, fieldnames=items[0].keys())\n",
    "        writer.writeheader()\n",
    "        writer.writerows(items)\n",
    "    print(f\" CSV guardado con {len(items)} hoteles\")\n",
    "else:\n",
    "    print(\"❌ No se encontraron hoteles, CSV no creado\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0079af64",
   "metadata": {},
   "source": [
    "## 8) Cerrar navegador"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d633e8b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cerrar navegador\n",
    "driver.quit()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
